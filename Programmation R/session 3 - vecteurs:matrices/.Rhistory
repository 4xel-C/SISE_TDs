# ------------------------ Exercice 2
x <- c(185,159,170,168,190,167,160,179,176,155)
y <- as.factor (c("h", "f", "f", "h", "f", "f", "f", "h", "h", "f"))
x
y
x[y == "h"]
test_student_vectors_manipulations <- function(x, y) {
if (!is.factor(y) | !length(unique(y))) {
stop("y n'est pas un factor ou ne contient pas le bon nombre de facteurs")
}
# Scinder les valeurs en deux groupes.
x_hommes <- x[y == "h"]
x_femmes <- x[y == "f"]
return(comp.moyenne(x_hommes, x_femmes))
}
test_student_vectors_manipulations(x, y)
# ------------------------ Exercice 1
comp.moyenne <- function(v1, v2) {
# Calcul des moyennes
m1 <- mean(v1)
m2 <- mean(v2)
# Calcul des variances
s1 <- sd(v1) **2
s2 <- sd(v2) **2
# Calcul du nombre d'éléments
n1 <- length(v1)
n2 <- length(v2)
# Calcul de la variance totale.
var <- ((n1-1) * s1 + (n2 - 1) * s2) / (n1 + n2 - 2)
# Calcul du t de student.
t <- (m1 - m2) / (sqrt(var) * sqrt((1/n1) + (1/n2)))
# Calcul de la pvalue.
p.value <- 2 * pt(abs(t), (n1 + n2 - 2), lower.tail = FALSE)
ddl <- n1 + n2 - 2
# Renvoyer une liste
return(list(t = t, p.value = p.value, ddl = ddl))
}
# ------------------------ Exercice 2
x <- c(185,159,170,168,190,167,160,179,176,155)
y <- as.factor (c("h", "f", "f", "h", "f", "f", "f", "h", "h", "f"))
test_student_vectors_manipulations <- function(x, y) {
if (!is.factor(y) | !length(unique(y))) {
stop("y n'est pas un factor ou ne contient pas le bon nombre de facteurs")
}
# Scinder les valeurs en deux groupes.
x_hommes <- x[y == "h"]
x_femmes <- x[y == "f"]
return(comp.moyenne(x_hommes, x_femmes))
}
test_student_vectors_manipulations(x, y)
# ------------------------ Exercice 9
A <- c(185,168,179,176)
B <- c(159,170,190,167,160,155)
A
rank(A)
rank(c(A, B))
names(A) <- "A"
A
names(A) <- rep("A", times(length(A))
)
names(A) <- rep("A", times = length(A))
A
rank(c(A, B))
names(B) <- rep("B", times = length(B))
a
A
B
test <- rank(c(A,B))
test
test[A]
test[names(test) == "A"]
help(rank)
return(list(stat = U, z = Z, pvalue = pvalue))
mann_whitney <- function(a, b) {
# Calcul des fréquences absolues.
n1 <- length(A)
n2 <- length(B)
n <- n1 + n2
# Calcul des sommes des rangs
names(A) <- rep("A", times = length(A))
names(B) <- rep("B", times = length(B))
rank_global <- rank(c(A, B))
S1 <- sum(rank_global[names(rank_global) == "A"], ties.method = "average")
S2 <- sum(rank_global[names(rank_global) == "B"], ties.method = "average")
# Calcul des statistiques U1 et U2
U1 <- S1 - (n1*(n1 + 1))/2
U2 <- S2 - (n2*(n2 + 1))/2
# Récupérer la statistique. U.
U <- min(U1, U2)
# Calculer la moyenne de la statistique.
E <- 1/2 * n1 * n2
# Calcul de la variance de la statistique.
V <- (1/12) * (n1 + n2 + 1) * n1 * n2
# Calcul de la statistique centrée réduite.
Z <- (U - E) / V
# Calcul de la pvalue correspondante.
pvalue <- pnorm(abs(Z), lower.tail = False) * 2
return(list(stat = U, z = Z, pvalue = pvalue))
}
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
A
B
mann-whitney(A, B)
mann_whitney(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
S1 <- sum(rank_global[names(rank_global) == "A"], ties.method = c("average"))
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
mann_whitney(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
mann_whitney(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
mann_whitney(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
mann_whitney(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
mann_whitney(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
mann_whitney(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
mann_whitney(A, B)
test <- mann_whitney(A, B)
test
test.stat
test[stat]
test["stat"]
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(A, B)
test
test["stat"]
test[["stat"]]
class(test[["stat"]])
class(test["stat"])
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(A, B)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(x, y)
help(pf)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
help(pf)
kwallis(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
kwallis(x, y)
help(qnorm)
y
levels(y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
levels(y)
length(levels(y))
class(length(levels(y)))
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
class(length(levels(y)))
length(levels(y))
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
x
y
table(x, y)
tapply(x, y, length)
prod(tapply(x, y, length))
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
test_vdw(x, y)
y
levels(y)
x[y == levels(y)[1]]
x
y
x
x[y == levels(y)[1]]
x[y == levels(y)[0]]
xk <- tapply(x, y, mean)
xk
x
means
xk
xk[y]
x
y
xk
x - xk[y]
x
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
7*c("a")
reps(c("a"), times=3)
rep(c("a"), times=3)
rep(c("a"), times=7*7)
help(matrix)
board <- rep(c("."), times=7*7)
board <- matrix(board, nrow = 7, ncol = 7)
board
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
print(board)
scan
scan()
scan("test")
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
combat_naval
combat_naval()
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
combat_naval()
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
combat_naval()
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
combat_naval()
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
combat_naval()
source("~/Desktop/Code/SISE - TDs/Programmation R/session 3 - vecteurs:matrices/Session3.r", echo = TRUE)
combat_naval()
combat_naval()
